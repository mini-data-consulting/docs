"use strict";(self.webpackChunkperiscope=self.webpackChunkperiscope||[]).push([[7650],{8e3:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"QueryGen/charts","title":"Chart Visualization","description":"This document outlines the data structures required for plotting various chart types within the application. The charting system expects data in a specific format, primarily defined by the chartConfig object and the data (which contains the actual data to be plotted).","source":"@site/docs/QueryGen/charts.md","sourceDirName":"QueryGen","slug":"/QueryGen/charts","permalink":"/docs/QueryGen/charts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Accessing via API","permalink":"/docs/QueryGen/API"}}');var i=s(4848),t=s(8453);const a={},c="Chart Visualization",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Query Response Payload",id:"query-response-payload",level:2},{value:"Sample Payload",id:"sample-payload",level:3},{value:"Payload Fields",id:"payload-fields",level:3},{value:"<code>chartConfig</code> Object",id:"chartconfig-object",level:2},{value:"<code>data</code> Structure",id:"data-structure",level:2},{value:"1. Line, Area, and Bar Charts",id:"1-line-area-and-bar-charts",level:3},{value:"2. Pie and Donut Charts",id:"2-pie-and-donut-charts",level:3},{value:"3. Histogram",id:"3-histogram",level:3},{value:"4. Scatter Chart",id:"4-scatter-chart",level:3},{value:"Data Transformation Notes",id:"data-transformation-notes",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"chart-visualization",children:"Chart Visualization"})}),"\n",(0,i.jsxs)(n.p,{children:["This document outlines the data structures required for plotting various chart types within the application. The charting system expects data in a specific format, primarily defined by the ",(0,i.jsx)(n.code,{children:"chartConfig"})," object and the ",(0,i.jsx)(n.code,{children:"data"})," (which contains the actual data to be plotted)."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The response for a chart visualization will come in a specific format. The system determines the chart type and configuration (",(0,i.jsx)(n.code,{children:"chartConfig"}),") based on the query and data."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"chartConfig"})," object can be found within the ",(0,i.jsx)(n.code,{children:"content.debug_information"})," field of the response, and the data corresponding to ",(0,i.jsx)(n.code,{children:"data"})," is found within the ",(0,i.jsx)(n.code,{children:"content.text"})," field (as a JSON string) when a chart is generated. The customer will have to parse these fields and create their visualization layer to work with this format of data."]}),"\n",(0,i.jsx)(n.h2,{id:"query-response-payload",children:"Query Response Payload"}),"\n",(0,i.jsx)(n.p,{children:"When a query is processed that might result in a chart or a textual answer, the system constructs a response message. This message payload is detailed below."}),"\n",(0,i.jsx)(n.h3,{id:"sample-payload",children:"Sample Payload"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "user": {\n    "name": "User Name",\n    "identity": "user-guid-abcde"\n  },\n  "chat_id": 789,\n  "conversation_id": 1011,\n  "role": "assistant",\n  "type": "text",\n  "content": {\n    "text": "{\\"data\\":[{\\"month\\":\\"January\\",\\"sales\\":1000},{\\"month\\":\\"February\\",\\"sales\\":1200}]}",\n    "debug_information": "{\\"query\\":\\"show monthly sales\\",\\"analysis\\":\\"User wants to see sales figures per month\\",\\"chartConfig\\":{\\"chartType\\":\\"bar\\",\\"xAxis\\":\\"month\\",\\"yAxis\\":[\\"sales\\"]}}"\n  },\n  "timestamp": 1678886400000\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The ",(0,i.jsx)(n.code,{children:"content.text"})," field may contain a JSON string (as shown above when a chart is generated) or a plain text string for non-chart responses. The ",(0,i.jsx)(n.code,{children:"content.debug_information"})," field is always a JSON string."]}),"\n",(0,i.jsx)(n.h3,{id:"payload-fields",children:"Payload Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"user"})}),(0,i.jsx)(n.td,{children:"Object"}),(0,i.jsx)(n.td,{children:"Contains user information."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"user.name"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"The name of the user, if available. Defaults to an empty string."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"user.identity"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"A unique identifier for the user, if available. Defaults to an empty string."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"chat_id"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Unique identifier for the chat session."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"conversation_id"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Unique identifier for the conversation."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"role"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsxs)(n.td,{children:["Indicates the message sender. For these responses, it will always be ",(0,i.jsx)(n.code,{children:'"assistant"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"type"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsxs)(n.td,{children:["Type of message content. For these responses, it will typically be ",(0,i.jsx)(n.code,{children:'"text"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"content"})}),(0,i.jsx)(n.td,{children:"Object"}),(0,i.jsx)(n.td,{children:"Contains the actual message content and debugging information."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"content.text"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"The primary response. This can be a JSON string representing the data (if a chart is applicable) or a plain text answer."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"content.debug_information"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsxs)(n.td,{children:["A JSON string containing diagnostic data. This string includes: ",(0,i.jsx)("br",{})," - ",(0,i.jsx)(n.code,{children:"query"}),": The original user query. ",(0,i.jsx)("br",{})," - ",(0,i.jsx)(n.code,{children:"analysis"}),": An explanation of how the query was interpreted. ",(0,i.jsx)("br",{})," - ",(0,i.jsx)(n.code,{children:"chartConfig"})," (optional): The ",(0,i.jsx)(n.code,{children:"chartConfig"})," object if a chart was generated."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"timestamp"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Unix timestamp in milliseconds indicating when the response was generated."})]})]})]}),"\n",(0,i.jsxs)(n.h2,{id:"chartconfig-object",children:[(0,i.jsx)(n.code,{children:"chartConfig"})," Object"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"chartConfig"})," object provides metadata about the chart and how the data should be interpreted. It is found as a JSON object within the ",(0,i.jsx)(n.code,{children:"content.debug_information"})," field of the main response payload. It has the following structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "chartType": "string", // e.g., "line", "bar", "pie", "histogram", "scatter"\n  "xAxis": "string", // Name of the column from your data to be used for the x-axis or categories/labels\n  "yAxis": ["string"], // Array of column names from your data to be used for the y-axis or values\n  "title": "string", // A suggested title for the chart\n  "description": "string" // A brief explanation of what the chart is showing\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chartType"}),': Specifies the type of chart to render (e.g., "line", "area", "bar", "pie", "donut", "histogram", "scatter").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"xAxis"}),": The name of the data column that will serve as the x-axis (for XY charts) or as labels/categories (for Pie/Donut charts)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"yAxis"}),": An array of data column names that will provide the values for the y-axis (for XY charts, Scatter) or the segment values (for Pie/Donut, Histogram)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"}),": A title for the chart, often generated based on the query or data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"description"}),": A short description of the chart's content."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"data-structure",children:[(0,i.jsx)(n.code,{children:"data"})," Structure"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"data"})," is obtained by parsing the JSON string found in the ",(0,i.jsx)(n.code,{children:"content.text"})," field of the main response payload (when a chart is applicable). When parsed, this JSON string reveals an object containing a ",(0,i.jsx)(n.code,{children:"data"})," key. The value of this ",(0,i.jsx)(n.code,{children:"data"})," key is an array, and its structure depends on the ",(0,i.jsx)(n.code,{children:"chartConfig.chartType"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// Example structure of parsed content.text\n{\n  "data": [\n    // ... array of data points, structure varies by chartType ...\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Below are the specific ",(0,i.jsx)(n.code,{children:"data"})," array structures for each supported chart type:"]}),"\n",(0,i.jsx)(n.h3,{id:"1-line-area-and-bar-charts",children:"1. Line, Area, and Bar Charts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.chartType"})}),": ",(0,i.jsx)(n.code,{children:'"line"'}),", ",(0,i.jsx)(n.code,{children:'"area"'}),", ",(0,i.jsx)(n.code,{children:'"bar"'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})}),": (string) Name of the column for the x-axis categories."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.yAxis"})}),": (array of strings) Name(s) of the column(s) for the y-axis values."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"data"})}),": An array of objects. Each object represents a data point."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["It will have a key matching the ",(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})," string, with its corresponding value from the dataset."]}),"\n",(0,i.jsxs)(n.li,{children:["For each string in ",(0,i.jsx)(n.code,{children:"chartConfig.yAxis"}),", there will be a key in the object, with its corresponding numeric value (parsed as a float; non-numeric values become 0)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Example data from ",(0,i.jsx)(n.code,{children:"content.text"})," (parsed):"]}),"\n(Assuming ",(0,i.jsx)(n.code,{children:'chartConfig.xAxis: "month"'}),", ",(0,i.jsx)(n.code,{children:'chartConfig.yAxis: ["sales", "expenses"]'}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  { "month": "January", "sales": 1000, "expenses": 400 },\n  { "month": "February", "sales": 1200, "expenses": 450 },\n  { "month": "March", "sales": 1100, "expenses": 420 }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-pie-and-donut-charts",children:"2. Pie and Donut Charts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.chartType"})}),": ",(0,i.jsx)(n.code,{children:'"pie"'}),", ",(0,i.jsx)(n.code,{children:'"donut"'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})}),": (string) Name of the column for the slice labels."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.yAxis"})}),": (array of strings) Only the first element (",(0,i.jsx)(n.code,{children:"yAxis[0]"}),") is used. This string is the name of the column for the slice values."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"data"})}),": An array of objects. Each object represents a slice of the pie/donut."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"label"}),": The value from the column specified by ",(0,i.jsx)(n.code,{children:"chartConfig.xAxis"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"}),": The numeric value from the column specified by ",(0,i.jsx)(n.code,{children:"chartConfig.yAxis[0]"})," (parsed as a float; non-numeric values become 0)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Example data from ",(0,i.jsx)(n.code,{children:"content.text"})," (parsed):"]}),"\n(Assuming ",(0,i.jsx)(n.code,{children:'chartConfig.xAxis: "category"'}),", ",(0,i.jsx)(n.code,{children:'chartConfig.yAxis: ["amount"]'}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  { "label": "Electronics", "value": 5000 },\n  { "label": "Clothing", "value": 3500 },\n  { "label": "Groceries", "value": 2000 }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-histogram",children:"3. Histogram"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.chartType"})}),": ",(0,i.jsx)(n.code,{children:'"histogram"'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})}),": While present in ",(0,i.jsx)(n.code,{children:"chartConfig"}),", it's not directly used to structure the ",(0,i.jsx)(n.code,{children:"data"})," for a histogram. It might be used by the charting library for axis labeling if it represents the binned categories. The primary data for the histogram comes from ",(0,i.jsx)(n.code,{children:"yAxis"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.yAxis"})}),": (array of strings) Only the first element (",(0,i.jsx)(n.code,{children:"yAxis[0]"}),") is used. This string is the name of the column whose values will be used to generate the histogram distribution."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"data"})}),": An array of numbers. Each number is a value from the column specified by ",(0,i.jsx)(n.code,{children:"chartConfig.yAxis[0]"})," (parsed as a float; non-numeric values become 0). The charting library will typically bin these values to create the histogram."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Example data from ",(0,i.jsx)(n.code,{children:"content.text"})," (parsed):"]}),"\n(Assuming ",(0,i.jsx)(n.code,{children:'chartConfig.yAxis: ["age"]'})," for a list of user ages)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"[25, 30, 22, 30, 35, 28, 40, 25, 25, 30]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"(The charting library will then process this array to create frequency bins, e.g., 20-29: 5, 30-39: 4, 40-49: 1)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-scatter-chart",children:"4. Scatter Chart"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.chartType"})}),": ",(0,i.jsx)(n.code,{children:'"scatter"'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})}),": (string) Name of the column for the x-coordinates of the points."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"chartConfig.yAxis"})}),": (array of strings) Only the first element (",(0,i.jsx)(n.code,{children:"yAxis[0]"}),") is used. This string is the name of the column for the y-coordinates of the points."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"data"})}),": An array of objects. Each object represents a point on the scatter plot."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"}),": The numeric value from the column specified by ",(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})," (parsed as a float; non-numeric values become 0)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"y"}),": The numeric value from the column specified by ",(0,i.jsx)(n.code,{children:"chartConfig.yAxis[0]"})," (parsed as a float; non-numeric values become 0)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Example data from ",(0,i.jsx)(n.code,{children:"content.text"})," (parsed):"]}),"\n(Assuming ",(0,i.jsx)(n.code,{children:'chartConfig.xAxis: "study_hours"'}),", ",(0,i.jsx)(n.code,{children:'chartConfig.yAxis: ["exam_score"]'}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  { "x": 2, "y": 65 },\n  { "x": 3, "y": 75 },\n  { "x": 1, "y": 50 },\n  { "x": 4, "y": 85 }\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-transformation-notes",children:"Data Transformation Notes"}),"\n",(0,i.jsx)(n.p,{children:"Key points regarding data transformation are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Numeric Conversion"}),": Values for plotting (Y-axis, pie slices, histogram data, scatter coordinates) are parsed to floating-point numbers. Non-numeric values default to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Column Naming"}),": ",(0,i.jsx)(n.code,{children:"chartConfig.xAxis"})," and ",(0,i.jsx)(n.code,{children:"chartConfig.yAxis"})," use column names as they appear in the provided dataset. If SQL aliases are used (e.g., ",(0,i.jsx)(n.code,{children:"SELECT user_age AS age"}),"), ",(0,i.jsx)(n.code,{children:"chartConfig"})," will use these aliases (e.g., ",(0,i.jsx)(n.code,{children:"age"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This document provides the data format. The customer is responsible for building their visualization layer to consume this data."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);