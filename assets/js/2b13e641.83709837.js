"use strict";(self.webpackChunkperiscope=self.webpackChunkperiscope||[]).push([[7251],{3683:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"channels/WebAngular","title":"Angular Integration","description":"Integrating the Periscope Web SDK into an Angular application involves loading the SDK, creating a dedicated component for the chatbot, and then using that component within your application.","source":"@site/docs/channels/WebAngular.md","sourceDirName":"channels","slug":"/channels/WebAngular","permalink":"/docs/channels/WebAngular","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Angular Integration","sidebar_label":"Angular"},"sidebar":"tutorialSidebar","previous":{"title":"Response Webhook","permalink":"/docs/channels/API/response-webhook"},"next":{"title":"Accessing via API","permalink":"/docs/QueryGen/API"}}');var i=t(4848),a=t(8453);const r={title:"Angular Integration",sidebar_label:"Angular"},s="Angular Integration with Periscope Web SDK",l={},c=[{value:"1. Load the SDK in <code>index.html</code>",id:"1-load-the-sdk-in-indexhtml",level:2},{value:"2. Create a Dedicated Angular Component",id:"2-create-a-dedicated-angular-component",level:2},{value:"3. Add the Component to an Angular Module",id:"3-add-the-component-to-an-angular-module",level:2},{value:"4. Use the Chatbot Component in Your Application",id:"4-use-the-chatbot-component-in-your-application",level:2},{value:"Key Angular Considerations:",id:"key-angular-considerations",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"angular-integration-with-periscope-web-sdk",children:"Angular Integration with Periscope Web SDK"})}),"\n",(0,i.jsx)(e.p,{children:"Integrating the Periscope Web SDK into an Angular application involves loading the SDK, creating a dedicated component for the chatbot, and then using that component within your application."}),"\n",(0,i.jsxs)(e.h2,{id:"1-load-the-sdk-in-indexhtml",children:["1. Load the SDK in ",(0,i.jsx)(e.code,{children:"index.html"})]}),"\n",(0,i.jsxs)(e.p,{children:["Make the SDK globally available by adding the script tag to your ",(0,i.jsx)(e.code,{children:"src/index.html"})," file. Place it preferably at the end of the ",(0,i.jsx)(e.code,{children:"<body>"})," tag:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",metastring:"showLineNumbers",children:'\x3c!-- src/index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <title>YourAngularApp</title>\n    <base href="/" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <link rel="icon" type="image/x-icon" href="favicon.ico" />\n  </head>\n  <body>\n    <app-root></app-root>\n    <script\n      async\n      src="https://media.periscopechat.com/sdk/chatbot-sdk.umd.js"\n    ><\/script>\n  </body>\n</html>\n'})}),"\n",(0,i.jsx)(e.h2,{id:"2-create-a-dedicated-angular-component",children:"2. Create a Dedicated Angular Component"}),"\n",(0,i.jsx)(e.p,{children:"Encapsulating the chatbot in its own component is a good practice for modularity and reusability."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"a. Generate the component using Angular CLI:"})}),"\n",(0,i.jsx)(e.p,{children:"Open your terminal and run:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"ng generate component chatbot\n"})}),"\n",(0,i.jsxs)(e.p,{children:["This command creates the necessary files for your component (e.g., ",(0,i.jsx)(e.code,{children:"src/app/chatbot/chatbot.component.ts"}),", ",(0,i.jsx)(e.code,{children:".html"}),", ",(0,i.jsx)(e.code,{children:".css"}),") and declares it in your ",(0,i.jsx)(e.code,{children:"app.module.ts"})," (or the closest module)."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:["b. Define the component's template (",(0,i.jsx)(e.code,{children:"src/app/chatbot/chatbot.component.html"}),"):"]})}),"\n",(0,i.jsx)(e.p,{children:"This HTML file will contain the div where the chatbot widget is rendered."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",metastring:"showLineNumbers",children:'<div [id]="containerId">\n  <chatbotSDK></chatbotSDK>\n</div>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Using ",(0,i.jsx)(e.code,{children:'[id]="containerId"'})," allows the ID to be dynamically set via an ",(0,i.jsx)(e.code,{children:"@Input"})," property in your component."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:["c. Implement the component's logic (",(0,i.jsx)(e.code,{children:"src/app/chatbot/chatbot.component.ts"}),"):"]})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:"showLineNumbers",children:'import {\n  Component,\n  AfterViewInit,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from "@angular/core";\n\n// Declare ChatbotSDK to inform TypeScript it\'s a global variable\n// This is crucial because the SDK is loaded via a script tag, not as an ES module.\ndeclare var ChatbotSDK: any;\n\n@Component({\n  selector: "app-chatbot", // This is how you\'ll use it in other templates\n  templateUrl: "./chatbot.component.html",\n  styleUrls: ["./chatbot.component.css"],\n})\nexport class ChatbotComponent implements AfterViewInit, OnChanges {\n  // --- Required SDK Configuration ---\n  @Input() socketUrl!: string; // Mark as definitely assigned if it\'s always provided\n  @Input() title: string = "Chat Support";\n  @Input() headerBgColor: string = "#007bff"; // Default blue\n  @Input() containerId: string = "periscope-chatbot-container"; // Unique ID for the chatbot instance\n\n  // --- Optional SDK Configuration (Refer to SDK documentation for all options) ---\n  @Input() iconUrl?: string;\n  @Input() initMessage?: string;\n  @Input() questionPills?: string[];\n  @Input() buttonText?: string;\n  @Input() buttonBgColor?: string;\n  // @Input() iconComponent?: any; // For advanced use with ReactNode, if applicable\n\n  private isSdkInitialized = false;\n  private sdkLoadAttempts = 0;\n  private readonly maxSdkLoadAttempts = 10; // e.g., 5 seconds if polling every 500ms\n  private sdkLoadInterval: any;\n\n  constructor() {}\n\n  ngAfterViewInit(): void {\n    this.attemptSdkInitialization();\n  }\n\n  private attemptSdkInitialization(): void {\n    if (typeof ChatbotSDK !== "undefined" && ChatbotSDK.init) {\n      this.initializeChatbot();\n      if (this.sdkLoadInterval) {\n        clearInterval(this.sdkLoadInterval);\n      }\n    } else {\n      this.sdkLoadAttempts++;\n      if (this.sdkLoadAttempts <= this.maxSdkLoadAttempts) {\n        if (!this.sdkLoadInterval) {\n          // Start interval only if not already running\n          this.sdkLoadInterval = setInterval(() => {\n            this.attemptSdkInitialization();\n          }, 500);\n        }\n      } else {\n        console.error(\n          "ChatbotSDK could not be loaded after multiple attempts."\n        );\n        if (this.sdkLoadInterval) {\n          clearInterval(this.sdkLoadInterval);\n        }\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // If critical inputs like socketUrl change, and SDK is initialized, consider re-initialization\n    // This is a basic example; you might need more sophisticated handling based on which inputs change.\n    if (\n      this.isSdkInitialized &&\n      (changes["socketUrl"] || changes["containerId"])\n    ) {\n      // console.warn(\'Chatbot re-initialization due to input changes might be needed.\');\n      // this.initializeChatbot(); // Be cautious with re-initialization logic\n    }\n  }\n\n  private initializeChatbot(): void {\n    if (!this.socketUrl) {\n      console.error("ChatbotSDK: socketUrl is required for initialization.");\n      return;\n    }\n    if (!this.containerId) {\n      console.error("ChatbotSDK: containerId is required for initialization.");\n      return;\n    }\n\n    ChatbotSDK.init({\n      socketUrl: this.socketUrl,\n      title: this.title,\n      headerBgColor: this.headerBgColor,\n      containerId: this.containerId,\n      iconUrl: this.iconUrl,\n      initMessage: this.initMessage,\n      questionPills: this.questionPills,\n      buttonText: this.buttonText,\n      buttonBgColor: this.buttonBgColor,\n      // iconComponent: this.iconComponent, // Uncomment if using\n    });\n    this.isSdkInitialized = true;\n  }\n\n  // --- Wrapper methods for SDK functionalities ---\n  // These methods provide a clean interface to the SDK from your Angular component\n\n  identifyUser(name: string, customer_uuid: string): void {\n    if (this.isSdkInitialized && ChatbotSDK && ChatbotSDK.identify) {\n      ChatbotSDK.identify(name, customer_uuid);\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for identifyUser call or identify method unavailable."\n      );\n    }\n  }\n\n  addCustomMetadata(metadata: object): void {\n    if (this.isSdkInitialized && ChatbotSDK && ChatbotSDK.addMetadata) {\n      ChatbotSDK.addMetadata(metadata);\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for addCustomMetadata call or addMetadata method unavailable."\n      );\n    }\n  }\n\n  showChat(): void {\n    if (this.isSdkInitialized && ChatbotSDK && ChatbotSDK.show) {\n      ChatbotSDK.show();\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for showChat call or show method unavailable."\n      );\n    }\n  }\n\n  hideChat(): void {\n    if (this.isSdkInitialized && ChatbotSDK && ChatbotSDK.hide) {\n      ChatbotSDK.hide();\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for hideChat call or hide method unavailable."\n      );\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"3-add-the-component-to-an-angular-module",children:"3. Add the Component to an Angular Module"}),"\n",(0,i.jsxs)(e.p,{children:["Ensure your ",(0,i.jsx)(e.code,{children:"ChatbotComponent"})," is declared in an Angular module. If you used ",(0,i.jsx)(e.code,{children:"ng generate component chatbot"}),", this is typically done automatically in ",(0,i.jsx)(e.code,{children:"src/app/app.module.ts"})," or the nearest parent module."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:"showLineNumbers",children:'// src/app/app.module.ts (or your feature module)\nimport { NgModule } from "@angular/core";\nimport { BrowserModule } from "@angular/platform-browser"; // Or CommonModule for feature modules\n\nimport { AppComponent } from "./app.component";\nimport { ChatbotComponent } from "./chatbot/chatbot.component"; // Ensure path is correct\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ChatbotComponent, // Your ChatbotComponent\n  ],\n  imports: [\n    BrowserModule,\n    // ... other Angular modules\n  ],\n  providers: [],\n  bootstrap: [AppComponent], // If this is the main AppModule\n  // exports: [ChatbotComponent] // If other modules will import this module to use ChatbotComponent\n})\nexport class AppModule {}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"4-use-the-chatbot-component-in-your-application",children:"4. Use the Chatbot Component in Your Application"}),"\n",(0,i.jsxs)(e.p,{children:["You can now use your ",(0,i.jsx)(e.code,{children:"<app-chatbot>"})," component selector in any other component's template where you want the chatbot to appear. Pass the necessary configurations using ",(0,i.jsx)(e.code,{children:"@Input()"})," properties."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",metastring:"showLineNumbers",children:'\x3c!-- Example: In your app.component.html or any other component template --\x3e\n<h1>Welcome to My Angular App</h1>\n\n<app-chatbot\n  [socketUrl]="\'https://your-tenant-name.periscopechat.com/web\'"\n  title="Customer Assistance"\n  headerBgColor="#123456"\n  containerId="my-unique-chatbot"\n  initMessage="Hi there! How can I help you today?"\n  [questionPills]="[\'What are your services?\', \'How do I reset my password?\']"\n  buttonText="Chat with us"\n></app-chatbot>\n\n<p>Some other content on your page.</p>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Remember to replace ",(0,i.jsx)(e.code,{children:"'https://your-tenant-name.periscopechat.com/web'"})," with your actual ",(0,i.jsx)(e.code,{children:"socketUrl"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"key-angular-considerations",children:"Key Angular Considerations:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"declare var ChatbotSDK: any;"})}),": This is vital for TypeScript to recognize the ",(0,i.jsx)(e.code,{children:"ChatbotSDK"})," object loaded globally via the ",(0,i.jsx)(e.code,{children:"<script>"})," tag."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"ngAfterViewInit"})}),": Use this lifecycle hook to ensure the DOM is ready before initializing the SDK. The provided example includes a polling mechanism as the SDK script loads asynchronously."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"@Input()"})," Properties"]}),": These make your ",(0,i.jsx)(e.code,{children:"ChatbotComponent"})," configurable and reusable."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"containerId"})}),": Ensure the ",(0,i.jsx)(e.code,{children:"containerId"})," passed to ",(0,i.jsx)(e.code,{children:"ChatbotSDK.init"})," is unique if you plan to have multiple instances, and it must match the ",(0,i.jsx)(e.code,{children:"id"})," of the ",(0,i.jsx)(e.code,{children:"div"})," in your ",(0,i.jsx)(e.code,{children:"chatbot.component.html"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Error Handling"}),": The example includes basic console error messages. You might want to implement more robust error handling."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Styling"}),": You can add styles to ",(0,i.jsx)(e.code,{children:"src/app/chatbot/chatbot.component.css"})," to customize the appearance of the chatbot container or elements around it."]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var o=t(6540);const i={},a=o.createContext(i);function r(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);