"use strict";(self.webpackChunkperiscope=self.webpackChunkperiscope||[]).push([[7707],{6222:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"channels/Web/WebReact","title":"React Integration","description":"Integrating the Periscope Web SDK into a React application involves loading the SDK, creating a dedicated component for the chatbot, and then using that component within your application.","source":"@site/docs/channels/Web/WebReact.md","sourceDirName":"channels/Web","slug":"/channels/Web/WebReact","permalink":"/docs/channels/Web/WebReact","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"React Integration","sidebar_label":"React"},"sidebar":"tutorialSidebar","previous":{"title":"Angular","permalink":"/docs/channels/Web/WebAngular"},"next":{"title":"API","permalink":"/docs/channels/API/"}}');var a=t(4848),i=t(8453);const r={title:"React Integration",sidebar_label:"React"},s="React Integration with Periscope Web SDK",c={},l=[{value:"1. Load the SDK in <code>public/index.html</code>",id:"1-load-the-sdk-in-publicindexhtml",level:2},{value:"2. Create a Dedicated React Component",id:"2-create-a-dedicated-react-component",level:2},{value:"3. Use the Chatbot Component in Your Application",id:"3-use-the-chatbot-component-in-your-application",level:2},{value:"4. Styling (Optional)",id:"4-styling-optional",level:2},{value:"Key Considerations:",id:"key-considerations",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"react-integration-with-periscope-web-sdk",children:"React Integration with Periscope Web SDK"})}),"\n",(0,a.jsx)(n.p,{children:"Integrating the Periscope Web SDK into a React application involves loading the SDK, creating a dedicated component for the chatbot, and then using that component within your application."}),"\n",(0,a.jsxs)(n.h2,{id:"1-load-the-sdk-in-publicindexhtml",children:["1. Load the SDK in ",(0,a.jsx)(n.code,{children:"public/index.html"})]}),"\n",(0,a.jsxs)(n.p,{children:["Make the SDK globally available by adding the script tag to your ",(0,a.jsx)(n.code,{children:"public/index.html"})," file. Place it preferably at the end of the ",(0,a.jsx)(n.code,{children:"<body>"})," tag:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'\x3c!-- public/index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <meta name="theme-color" content="#000000" />\n    <meta\n      name="description"\n      content="Web site created using create-react-app"\n    />\n    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />\n    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id="root"></div>\n    <script\n      async\n      src="https://media.periscopechat.com/sdk/chatbot-sdk.umd.js"\n    ><\/script>\n  </body>\n</html>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"2-create-a-dedicated-react-component",children:"2. Create a Dedicated React Component"}),"\n",(0,a.jsx)(n.p,{children:"Encapsulating the chatbot in its own component is a good practice for modularity and reusability."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["a. Create the component file (e.g., ",(0,a.jsx)(n.code,{children:"src/Chatbot.js"})," or ",(0,a.jsx)(n.code,{children:"src/Chatbot.tsx"}),"):"]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"showLineNumbers",children:'// src/Chatbot.js\nimport React, { useEffect, useRef } from "react";\n\n// Declare ChatbotSDK to inform TypeScript/JavaScript it\'s a global variable\n// This is crucial because the SDK is loaded via a script tag, not as an ES module.\n/* global ChatbotSDK */\n\nconst Chatbot = (props) => {\n  const {\n    socketUrl,\n    title = "Chat Support",\n    headerBgColor = "#007bff", // Default blue\n    containerId = "periscope-chatbot-container", // Unique ID for the chatbot instance\n    iconUrl,\n    initMessage,\n    questionPills,\n    buttonText,\n    buttonBgColor,\n    // iconComponent, // For advanced use with ReactNode\n  } = props;\n\n  const chatbotContainerRef = useRef(null);\n  const isSdkInitialized = useRef(false);\n  const sdkLoadAttempts = useRef(0);\n  const maxSdkLoadAttempts = 10; // e.g., 5 seconds if polling every 500ms\n  const sdkLoadInterval = useRef(null);\n\n  useEffect(() => {\n    const attemptSdkInitialization = () => {\n      if (typeof ChatbotSDK !== "undefined" && ChatbotSDK.init) {\n        initializeChatbot();\n        if (sdkLoadInterval.current) {\n          clearInterval(sdkLoadInterval.current);\n          sdkLoadInterval.current = null;\n        }\n      } else {\n        sdkLoadAttempts.current++;\n        if (sdkLoadAttempts.current <= maxSdkLoadAttempts) {\n          if (!sdkLoadInterval.current) {\n            // Start interval only if not already running\n            sdkLoadInterval.current = setInterval(() => {\n              attemptSdkInitialization();\n            }, 500);\n          }\n        } else {\n          console.error(\n            "ChatbotSDK could not be loaded after multiple attempts."\n          );\n          if (sdkLoadInterval.current) {\n            clearInterval(sdkLoadInterval.current);\n            sdkLoadInterval.current = null;\n          }\n        }\n      }\n    };\n\n    const initializeChatbot = () => {\n      if (!socketUrl) {\n        console.error("ChatbotSDK: socketUrl is required for initialization.");\n        return;\n      }\n      if (!containerId) {\n        console.error(\n          "ChatbotSDK: containerId is required for initialization."\n        );\n        return;\n      }\n\n      ChatbotSDK.init({\n        socketUrl,\n        title,\n        headerBgColor,\n        containerId,\n        iconUrl,\n        initMessage,\n        questionPills,\n        buttonText,\n        buttonBgColor,\n        // iconComponent, // Uncomment if using\n      });\n      isSdkInitialized.current = true;\n    };\n\n    attemptSdkInitialization();\n\n    // Cleanup interval on component unmount\n    return () => {\n      if (sdkLoadInterval.current) {\n        clearInterval(sdkLoadInterval.current);\n      }\n      // Optionally, you might want to call ChatbotSDK.destroy() or similar if the SDK provides it\n    };\n  }, [\n    socketUrl,\n    title,\n    headerBgColor,\n    containerId,\n    iconUrl,\n    initMessage,\n    questionPills,\n    buttonText,\n    buttonBgColor,\n  ]); // Re-run effect if these props change\n\n  // --- Wrapper methods for SDK functionalities (optional) ---\n  // These can be exposed via ref or passed down as props if needed from parent\n\n  const identifyUser = (name, customer_uuid) => {\n    if (\n      isSdkInitialized.current &&\n      typeof ChatbotSDK !== "undefined" &&\n      ChatbotSDK.identify\n    ) {\n      ChatbotSDK.identify(name, customer_uuid);\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for identifyUser call or identify method unavailable."\n      );\n    }\n  };\n\n  const addCustomMetadata = (metadata) => {\n    if (\n      isSdkInitialized.current &&\n      typeof ChatbotSDK !== "undefined" &&\n      ChatbotSDK.addMetadata\n    ) {\n      ChatbotSDK.addMetadata(metadata);\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for addCustomMetadata call or addMetadata method unavailable."\n      );\n    }\n  };\n\n  const showChat = () => {\n    if (\n      isSdkInitialized.current &&\n      typeof ChatbotSDK !== "undefined" &&\n      ChatbotSDK.show\n    ) {\n      ChatbotSDK.show();\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for showChat call or show method unavailable."\n      );\n    }\n  };\n\n  const hideChat = () => {\n    if (\n      isSdkInitialized.current &&\n      typeof ChatbotSDK !== "undefined" &&\n      ChatbotSDK.hide\n    ) {\n      ChatbotSDK.hide();\n    } else {\n      console.warn(\n        "ChatbotSDK not ready for hideChat call or hide method unavailable."\n      );\n    }\n  };\n\n  // Expose methods via ref if needed (example)\n  // useImperativeHandle(ref, () => ({\n  //   identifyUser,\n  //   addCustomMetadata,\n  //   showChat,\n  //   hideChat,\n  // }));\n\n  return (\n    <div id={containerId} ref={chatbotContainerRef}>\n      <chatbotSDK></chatbotSDK>\n    </div>\n  );\n};\n\nexport default Chatbot;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"3-use-the-chatbot-component-in-your-application",children:"3. Use the Chatbot Component in Your Application"}),"\n",(0,a.jsxs)(n.p,{children:["You can now import and use your ",(0,a.jsx)(n.code,{children:"Chatbot"})," component in any other component where you want the chatbot to appear. Pass the necessary configurations as props."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",metastring:"showLineNumbers",children:'// Example: In your App.js or any other component\nimport React from "react";\nimport Chatbot from "./Chatbot"; // Ensure path is correct\nimport "./App.css";\n\nfunction App() {\n  const tenantName = "<your_tenant_name>"; // Replace with your actual tenant name\n\n  return (\n    <div className="App">\n      <header className="App-header">\n        <h1>Welcome to My React App</h1>\n      </header>\n      <Chatbot\n        socketUrl={`https://\\${tenantName}.periscopechat.com/web`}\n        title="Support Assistant"\n        headerBgColor="darkblue"\n        containerId="react-chatbot"\n        initMessage="Hello! How can I help you today with your React app?"\n        questionPills={["How to install?", "What are the features?"]}\n        buttonText="Chat with AI"\n      />\n      {/* You can add buttons or other UI elements to interact with the chatbot programmatically */}\n      {/* For example, using a ref to call showChat() or hideChat() */}\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"4-styling-optional",children:"4. Styling (Optional)"}),"\n",(0,a.jsx)(n.p,{children:"You might want to add some basic styling for the container or the page."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:"showLineNumbers",children:"/* src/App.css or your main stylesheet */\n.App {\n  text-align: center;\n}\n\n.App-header {\n  background-color: #282c34;\n  padding: 20px;\n  color: white;\n  margin-bottom: 20px;\n}\n\n/* Ensure the chatbot container doesn't cause layout shifts if it's initially empty */\n#react-chatbot chatbotSDK {\n  /* The SDK will manage its own internal styling and visibility */\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"key-considerations",children:"Key Considerations:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Global SDK:"})," The ",(0,a.jsx)(n.code,{children:"ChatbotSDK"})," is loaded globally. The ",(0,a.jsx)(n.code,{children:"/* global ChatbotSDK */"})," comment helps linters understand that ",(0,a.jsx)(n.code,{children:"ChatbotSDK"})," is a global variable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SDK Loading:"})," The ",(0,a.jsx)(n.code,{children:"useEffect"})," hook with the ",(0,a.jsx)(n.code,{children:"attemptSdkInitialization"})," logic ensures that ",(0,a.jsx)(n.code,{children:"ChatbotSDK.init"})," is called only after the SDK script has loaded. It polls a few times before giving up."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Props:"})," The ",(0,a.jsx)(n.code,{children:"Chatbot"})," component accepts props to configure the SDK, making it reusable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Container ID:"})," Ensure the ",(0,a.jsx)(n.code,{children:"containerId"})," passed to the ",(0,a.jsx)(n.code,{children:"Chatbot"})," component matches the ",(0,a.jsx)(n.code,{children:"id"})," of the ",(0,a.jsx)(n.code,{children:"div"})," in its render method. This is where the SDK will mount the chatbot UI."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"chatbotSDK"})," element"]}),": The ",(0,a.jsx)(n.code,{children:"<chatbotSDK></chatbotSDK>"})," custom element is part of how the Periscope SDK injects its UI. Ensure this is present within the container ",(0,a.jsx)(n.code,{children:"div"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tenant Name:"})," Remember to replace ",(0,a.jsx)(n.code,{children:"<your_tenant_name>"})," in ",(0,a.jsx)(n.code,{children:"socketUrl"})," with your actual Periscope tenant name."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interacting Programmatically:"})," To call methods like ",(0,a.jsx)(n.code,{children:"identify"}),", ",(0,a.jsx)(n.code,{children:"show"}),", ",(0,a.jsx)(n.code,{children:"hide"}),", or ",(0,a.jsx)(n.code,{children:"addMetadata"})," from a parent component:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["You can pass callback props to the ",(0,a.jsx)(n.code,{children:"Chatbot"})," component that then call the SDK methods."]}),"\n",(0,a.jsxs)(n.li,{children:["Alternatively, use ",(0,a.jsx)(n.code,{children:"React.forwardRef"})," and ",(0,a.jsx)(n.code,{children:"useImperativeHandle"})," in the ",(0,a.jsx)(n.code,{children:"Chatbot"})," component to expose these methods directly to a parent component via a ",(0,a.jsx)(n.code,{children:"ref"}),". The example code includes a commented-out section for ",(0,a.jsx)(n.code,{children:"useImperativeHandle"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This setup provides a robust way to integrate the Periscope Web SDK into your React applications."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);